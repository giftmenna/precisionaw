
> rest-express@1.0.0 dev
> tsx server/index.ts

/home/runner/workspace/server/controllers/test-controller.ts:4
import { tests, testResults, wordOfTheDay } from "../storage";
                ^

SyntaxError: The requested module '../storage' does not provide an export named 'testResults'
    at ModuleJob._instantiate (node:internal/modules/esm/module_job:146:21)
    at async ModuleJob.run (node:internal/modules/esm/module_job:229:5)
    at async ModuleLoader.import (node:internal/modules/esm/loader:473:24)
    at async asyncRunEntryPointWithESMLoader (node:internal/modules/run_main:122:5)

Node.js v20.18.1                      import { users, type User, type InsertUser } from "@shared/schema";

// modify the interface with any CRUD methods
// you might need

export interface IStorage {
  getUser(id: number): Promise<User | undefined>;
  getUserByUsername(username: string): Promise<User | undefined>;
  createUser(user: InsertUser): Promise<User>;
}

export class MemStorage implements IStorage {
  private users: Map<number, User>;
  currentId: number;

  constructor() {
    this.users = new Map();
    this.currentId = 1;
  }

  async getUser(id: number): Promise<User | undefined> {
    return this.users.get(id);
  }

  async getUserByUsername(username: string): Promise<User | undefined> {
    return Array.from(this.users.values()).find(
      (user) => user.username === username,
    );
  }

  async createUser(insertUser: InsertUser): Promise<User> {
    const id = this.currentId++;
    const user: User = { ...insertUser, id };
    this.users.set(id, user);
    return user;
  }
}

export const storage = new MemStorage();
import { Request, Response } from "express";
import { IStorage } from "../storage";
import { UserProfile } from "../../shared/types";

export class UserController {
  private storage: IStorage;

  constructor(storage: IStorage) {
    this.storage = storage;
  }

  /**
   * Get user by ID
   */
  getUserById = async (req: Request, res: Response) => {
    const { id } = req.params;
    
    if (!id) {
      return res.status(400).json({ message: "User ID is required" });
    }
    
    try {
      const user = await this.storage.getUser(Number(id));
      
      if (!user) {
        return res.status(404).json({ message: "User not found" });
      }
      
      // Don't send the password
      const { password, ...userWithoutPassword } = user;
      
      res.json(userWithoutPassword);
    } catch (error) {
      console.error("Error getting user:", error);
      res.status(500).json({ message: "Failed to get user" });
    }
  };

  /**
   * Update user profile
   */
  updateUser = async (req: Request, res: Response) => {
    const { id } = req.params;
    const updateData: UserProfile = req.body;
    
    if (!id) {
      return res.status(400).json({ message: "User ID is required" });
    }
    
    // Validate update data
    if (!updateData || Object.keys(updateData).length === 0) {
      return res.status(400).json({ message: "No update data provided" });
    }
    
    try {
      const user = await this.storage.getUser(Number(id));
      
      if (!user) {
        return res.status(404).json({ message: "User not found" });
      }
      
      // In a real app, we would update the user data here
      // For now, we'll just return a success response
      
      // Don't send the password
      const { password, ...userWithoutPassword } = user;
      
      res.json({
        ...userWithoutPassword,
        // Simulate updated fields
        ...updateData
      });
    } catch (error) {
      console.error("Error updating user:", error);
      res.status(500).json({ message: "Failed to update user" });
    }
  };

  /**
   * Change user password
   */
  changePassword = async (req: Request, res: Response) => {
    const { id } = req.params;
    const { currentPassword, newPassword } = req.body;
    
    if (!id) {
      return res.status(400).json({ message: "User ID is required" });
    }
    
    if (!currentPassword || !newPassword) {
      return res.status(400).json({ message: "Current password and new password are required" });
    }
    
    try {
      const user = await this.storage.getUser(Number(id));
      
      if (!user) {
        return res.status(404).json({ message: "User not found" });
      }
      
      // In a real app, we would verify the current password and update it
      // For now, we'll just return a success response
      
      res.json({ message: "Password updated successfully" });
    } catch (error) {
      console.error("Error changing password:", error);
      res.status(500).json({ message: "Failed to change password" });
    }
  };
}
import { Request, Response } from "express";
import { v4 as uuidv4 } from "uuid";
import { Test, TestResult, LeaderboardEntry } from "../../shared/types";
import { tests, testResults, wordOfTheDay } from "../storage";

export class TestController {
  getTests = (req: Request, res: Response) => {
    res.json(tests);
  };

  getTestById = (req: Request, res: Response) => {
    const { id } = req.params;
    const test = tests.find(test => test.id === id);
    if (!test) {
      return res.status(404).json({ message: "Test not found" });
    }
    res.json(test);
  };

  submitTest = (req: Request, res: Response) => {
    const { userId, testId, answers, timeTaken } = req.body;
    if (!userId || !testId || !answers || timeTaken === undefined) {
      return res.status(400).json({ message: "Missing required fields" });
    }

    const test = tests.find(test => test.id === testId);
    if (!test) {
      return res.status(404).json({ message: "Test not found" });
    }

    let correctAnswers = 0;
    for (const question of test.questions) {
      if (answers[question.id] === question.correctAnswer) {
        correctAnswers++;
      }
    }

    const score = Math.round((correctAnswers / test.questions.length) * 100);
    const testResult: TestResult = {
      id: uuidv4(),
      userId,
      testId,
      subject: test.subject,
      score,
      totalQuestions: test.questions.length,
      correctAnswers,
      timeTaken,
      completed: true,
      timestamp: new Date().toISOString()
    };

    testResults.push(testResult);
    res.json(testResult);
  };

  getTestResult = (req: Request, res: Response) => {
    const { id } = req.params;
    const result = testResults.find(result => result.id === id);
    if (!result) {
      return res.status(404).json({ message: "Test result not found" });
    }

    const test = tests.find(test => test.id === result.testId);
    if (!test) {
      return res.status(500).json({ message: "Test not found for this result" });
    }

    res.json({
      ...result,
      questions: test.questions
    });
  };

  getTestResultsByUser = (req: Request, res: Response) => {
    const { userId } = req.params;
    const results = testResults.filter(result => result.userId === userId);
    res.json(results);
  };

  getLeaderboard = (req: Request, res: Response) => {
    const leaderboardEntries: LeaderboardEntry[] = [];
    const subjectResults: Record<string, TestResult[]> = {};

    for (const result of testResults) {
      if (!subjectResults[result.subject]) {
        subjectResults[result.subject] = [];
      }
      subjectResults[result.subject].push(result);
    }

    for (const subject in subjectResults) {
      const sortedResults = subjectResults[subject]
        .sort((a, b) => b.score - a.score)
        .slice(0, 5);

      sortedResults.forEach((result, index) => {
        leaderboardEntries.push({
          id: uuidv4(),
          userId: result.userId,
          displayName: `Student ${String.fromCharCode(65 + index)}`,
          subject: result.subject,
          score: result.score,
          rank: index + 1
        });
      });
    }

    if (leaderboardEntries.length < 5) {
      const placeholderEntries: LeaderboardEntry[] = [
        { id: "lb-1", userId: "user-1", displayName: "Student A", subject: "Mathematics", score: 98, rank: 1 },
        { id: "lb-2", userId: "user-2", displayName: "Student B", subject: "English", score: 95, rank: 2 },
        { id: "lb-3", userId: "user-3", displayName: "Student C", subject: "Mathematics", score: 92, rank: 3 },
        { id: "lb-4", userId: "user-4", displayName: "Student D", subject: "English", score: 90, rank: 4 },
        { id: "lb-5", userId: "user-5", displayName: "Student E", subject: "Mathematics", score: 89, rank: 5 }
      ];

      const placeholdersToAdd = 5 - leaderboardEntries.length;
      leaderboardEntries.push(...placeholderEntries.slice(0, placeholdersToAdd));
    }

    res.json(leaderboardEntries);
  };

  getWordOfTheDay = (req: Request, res: Response) => {
    res.json(wordOfTheDay);
  };
}

export default new TestController();